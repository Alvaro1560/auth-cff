image: golang:latest #Usamos la imagen de docker golang:latest por que hace referencia a la ultima version de golang

stages: #Aqui definimos los 3 stages esenciales en todo pipeline
  - build
  - test
  - deploy

# STAGE BUILD
build:
  stage: build # Hacemos referencia al stage build definido en stages
  script: # Definimos las tareas a desarrollar que se realizaran dentro del stage build
    - mkdir build # Creamos la carpeta build donde se almacenara el ejecutable
    - go get -v -d ./... # Descargamos las dependecias necesarias para que se pueda desarrollar el ejecutable
    - echo "Building CI/CD........"
    - GOOS=linux GOARCH=amd64 go build -o build/ecatch-auth # Compilamos y creamos el ejecutable que se va llamar ecatch-auth.
    - chmod +x build/ecatch-auth # Damos permisos de ejecución al archivo "build/ecatch-auth, pero para que esto funcione el archivo se debe guardar en artifacts
  artifacts: # Los artifacts se utiliza para especificar qué archivos o directorios se deben mantener después de que creamos la carpeta builds
    paths:
      - build
  only: # solo se debe ejecutar el trabajo actual en la rama main
    - develop

# STAGE TEST
test:
  stage: test # Hacemos referencia al stage test build definido en stages
  script:
    - echo "Testing CI/CD........"
    - go test -v -coverprofile=coverage.out -covermode=atomic ./... # ejecuta las pruebas unitarias en todos los paquetes y subpaquetes del directorio actual y sus subdirectorios, generando un informe de cobertura en el archivo "coverage.out"
    - go tool cover -func=coverage.out # Analiza los resultados de la cobertura funcional en el archivo "coverage.out" generado previamente con el comando go test -coverprofile, y muestra un resumen de la cobertura de las funciones en el código
  artifacts: # Mantenemos el archivo corverage.out por que es aqui donde obtendremos los informes
    paths:
      - coverage.out
  dependencies: # En las dependecias ponemos de que dependemos de build por que testearemos el ejecutable construido
    - build
  only: #solo se debe ejecutar el trabajo actual en la rama main
    - develop

# STAGE TEST
deploy:
  stage: deploy # Hacemos referencia al stage deploy build definido en stages
  script:
    - echo "Deploying CI/CD......."
    - sshpass -p $password scp build/ecatch-auth $user@$server:/home/odin/jla/dev/ecatch-core/ecatch/microservicios/ecatch-auth # Accedemos al servidor odin con la clave, usuario y ip del servidor definido en variables de CI/CD para poder copiar el ejecutable en la ruta definida
      #- sshpass -p $password ssh $user@$server "systemctl restart myapp"
  dependencies: # en este stage dependemos de los stages build y test
    - build
    - test
  only:
    - develop
